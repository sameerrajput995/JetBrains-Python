type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                     ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    total_water = 400
    total_milk = 540
    total_coffee = 120
    num_cups = 9
    money = 550

    print("The coffee machine has:")
    print(total_water, "of water")
    print(total_milk, "of milk")
    print(total_coffee, "of coffee beans")
    print(num_cups, "of disposable cups")
    print(money, "of money")

    action = input("Write action (buy, fill, take) :").strip().lower()
    print(action)


    def main():
        if action == "buy":
            buy_choice()
        elif action == "fill":
            fill()
        else:
            take()
        print("The coffee machine has:")
        print(total_water, "of water")
        print(total_milk, "of milk")
        print(total_coffee, "of coffee beans")
        print(num_cups, "of disposable cups")
        print(money, "of money")


    def buy_choice():
        buy = int(input("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:").strip())
        print(buy)
        return espresso() if buy == 1 else latte() if buy == 2 else cappuccino()


    def fill():
        w_add = int(input("Write how many ml of water do you want to add:"))
        m_add = int(input("Write how many ml of milk do you want to add:"))
        c_add = int(input("Write how many grams of coffee beans do you want to add:"))
        cups_add = int(input("Write how many disposable cups of coffee do you want to add:"))
        print(w_add)
        print(m_add)
        print(c_add)
        print(cups_add)


    def take():
        print("I gave you", money)


    # water_req = num_cups * 200
    # coffee_req = num_cups * 15
    # milk_req = num_cups * 50


    # N = int(min(((total_water - water_req) // (water_req / num_cups)),
    #              ((total_milk - milk_req) // (milk_req / num_cups)),
    #              ((total_coffee - coffee_req) // (coffee_req / num_cups))))
    #
    # if water_req > total_water or  milk_req > total_milk or coffee_req > total_coffee:
    #     print("No, I can make only",
    #          int(min((total_water // (water_req / num_cups)),
    #              (total_milk // (milk_req / num_cups)),
    #              (total_coffee // (coffee_req / num_cups)))), "cups of coffee")
    #
    # elif water_req <= total_water and  milk_req <= total_milk and coffee_req <= total_coffee:
    #     print("Yes, I can make that amount of coffee and even", N, "more than that)") if N > 0 \
    #     else print("Yes, I can make that amount of coffee")


    def espresso(cups=1):
        global total_water, total_milk, total_coffee, money, num_cups
        amount = 4
        water_req = 250
        milk_req = 0
        coffee_req = 16
        total_water -= water_req
        total_milk -= milk_req
        total_coffee -= coffee_req
        money -= amount
        num_cups -= cups
        # print("The coffee machine has:")
        # print(total_water, "of water")
        # print(total_milk, "of milk")
        # print(total_coffee, "of coffee beans")
        # print(num_cups, "of disposable cups")
        # print(money, "of money")


    def latte(cups=1):
        global total_water, total_milk, total_coffee, money, num_cups
        amount = 7
        water_req = 350
        milk_req = 75
        coffee_req = 20
        total_water -= water_req
        total_milk -= milk_req
        total_coffee -= coffee_req
        money -= amount
        num_cups -= cups
        # print("The coffee machine has:")
        # print(total_water, "of water")
        # print(total_milk, "of milk")
        # print(total_coffee, "of coffee beans")
        # print(num_cups, "of disposable cups")
        # print(money, "of money")


    def cappuccino(cups=1):
        global total_water, total_milk, total_coffee, money, num_cups
        amount = 6
        water_req = 200
        milk_req = 100
        coffee_req = 12
        total_water -= water_req
        total_milk -= milk_req
        total_coffee -= coffee_req
        money -= amount
        num_cups -= cups
        # print("The coffee machine has:")
        # print(total_water, "of water")
        # print(total_milk, "of milk")
        # print(total_coffee, "of coffee beans")
        # print(num_cups, "of disposable cups")
        # print(money, "of money")


    if __name__ == '__main__':
        main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/370/implement
status: Solved
record: 5
